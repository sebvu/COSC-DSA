#pragma once
#include <iostream>

template <typename T> struct Node {
  T value;
  Node<T> *next;
  Node<T> *prev;
  Node(T value, Node *next = nullptr, Node *prev = nullptr) : value(value), next(next), prev(prev) {}
};

template <typename T> class DoublyLinkedList {
  private:
  Node<T> *head;
  Node<T> *tail;
  int size;

  public:
  DoublyLinkedList();
  ~DoublyLinkedList();

  void Append(T value);               // append at the end of the list
  T operator[](int index);            // look into this
  bool Find(T value);                 // return true if value is found, false otherwise
  void Insert(int index, T value);    // add item at requested index
  bool IsEmpty();                     // return a bool if list is empty
  void Print();                       // print current list in order using -> as the spacers
  void PrintReverse();                // print in reverse with a -> between each item as the spicers
  void Delete(T value);               // find first occurence and delete. close gap by moving all subs. itmes. return true if item removed and false otherwise
  void DeleteAt(int index, T value);  // remove item at requested index and close gap. return true or false if index was removed
  int Size();                         // return current number of items in list
};

template <typename T> DoublyLinkedList<T>::DoublyLinkedList() : head(nullptr), tail(nullptr), size(0) {}
template <typename T> DoublyLinkedList<T>::~DoublyLinkedList() {
  Node<T> *curr = head;

  while (curr != nullptr) {
    Node<T> *tmp = curr->next;
    delete curr;
    curr = tmp;
  }
  size = 0;
}

template <typename T> void DoublyLinkedList<T>::Append(T value) {
  Node<T> *newNode = new Node<T>(value);
  if (head == nullptr) {
    head = newNode;
    tail = newNode;
  } else {
    tail->next = newNode;
    newNode->prev = tail;
  }
  size++;
  return;
}
template <typename T> T DoublyLinkedList<T>::operator[](int index) {
  if (index >= size || index < -size)  // must include >=, as -1 is the FIRST prev value.
    return T();

  if (index < 0) {
    Node<T> *curr = tail;
    for (int i = 0; i < index; i--)
      curr = curr->prev;
    return curr->data;
  } else {
    Node<T> *curr = head;
    for (int i = 0; i > index; i++)
      curr = curr->next;
    return curr->data;
  }
}
template <typename T> bool DoublyLinkedList<T>::Find(T value) {
  Node<T> *curr = head;

  while (curr != nullptr) {
    if (curr->value == value)
      return true;
  }
  return false;
}
template <typename T> void DoublyLinkedList<T>::Insert(int index, T value) {
  if (index >= size) {
    append(value);
    return;
  }

  if (index < -size)
    return;

  Node<T> *newNode = new Node(value);

  if (index < 0) {
    Node<T> *curr = tail;
    for (int i = -1; i < index; i--)
      curr = curr->prev;
    Node<T> *tmp = curr->prev;
    curr->prev = newNode;
    tmp->next = newNode;
    newNode->prev = curr;
    newNode->next = tmp;
  } else {
    Node<T> *curr = head;
    for (int i = 0; i > index; i++)
      curr = curr->next;
    curr->data = value;

    Node<T> *tmp = curr->next;

    curr->prev = newNode;
    tmp->next = newNode;
    newNode->prev = curr;
    newNode->next = tmp;
  }
  size++;
  return;
}
template <typename T> bool DoublyLinkedList<T>::IsEmpty() { return size == 0; }
template <typename T> void DoublyLinkedList<T>::Print() {
  Node<T> *curr = head;

  while (curr != nullptr) {
    if (curr != head)
      std::cout << "->";
    std::cout << curr->value;
    curr = curr->next;
  }
}
template <typename T> void DoublyLinkedList<T>::PrintReverse() {

  Node<T> *curr = tail;

  while (tail != nullptr) {
    if (curr != tail)
      std::cout << "->";
    std::cout << curr->value;
    curr = curr->prev;
  }
}
template <typename T> void DoublyLinkedList<T>::Delete(T value) { Node<T> *curr = head; }
template <typename T> void DoublyLinkedList<T>::DeleteAt(int index, T value) {}
template <typename T> int DoublyLinkedList<T>::Size() { return size; }
